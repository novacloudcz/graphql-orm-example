// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
)

type CompanyResultType struct {
	Items []*Company `json:"items"`
	Count int        `json:"count"`
}

type TodoResultType struct {
	Items []*Todo `json:"items"`
	Count int     `json:"count"`
}

type UserResultType struct {
	Items []*User `json:"items"`
	Count int     `json:"count"`
}

type TodoState string

const (
	TodoStateReady TodoState = "READY"
	TodoStateDone  TodoState = "DONE"
)

var AllTodoState = []TodoState{
	TodoStateReady,
	TodoStateDone,
}

func (e TodoState) IsValid() bool {
	switch e {
	case TodoStateReady, TodoStateDone:
		return true
	}
	return false
}

func (e TodoState) String() string {
	return string(e)
}

func (e *TodoState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoState", str)
	}
	return nil
}

func (e TodoState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
