package gen

import (
	"github.com/jinzhu/gorm"
	"gopkg.in/gormigrate.v1"
)

func Migrate(db *gorm.DB, options *gormigrate.Options, migrations []*gormigrate.Migration) error {
	m := gormigrate.New(db, options, migrations)

	// // it's possible to use this, but in case of any specific keys or columns are created in migrations, they will not be generated by automigrate
	// m.InitSchema(func(tx *gorm.DB) error {
	// 	return AutoMigrate(db)
	// })

	return m.Migrate()
}

func AutoMigrate(db *gorm.DB) error {
	_db := db.AutoMigrate(
		Company{},
		User{},
		Task{},
	)

	if _db.Dialect().GetName() != "sqlite3" {

		_db.Model(Company_employees{}).RemoveForeignKey("company_id", TableName("companies")+"(id)")
		_db = _db.Model(Company_employees{}).AddForeignKey("company_id", TableName("companies")+"(id)", "CASCADE", "CASCADE")

		_db.Model(Company_employees{}).RemoveForeignKey("employee_id", TableName("users")+"(id)")
		_db = _db.Model(Company_employees{}).AddForeignKey("employee_id", TableName("users")+"(id)", "CASCADE", "CASCADE")

		_db.Model(Task{}).RemoveForeignKey("assigneeId", TableName("users")+"(id)")
		_db = _db.Model(Task{}).AddForeignKey("assigneeId", TableName("users")+"(id)", "SET NULL", "SET NULL")

	}
	return _db.Error
}
